
package test.ui;


import java.io.*;

import test.framework.*;

/**
 * This class was generated by a SmartGuide.
 *
 */
class TraceFrame extends java.awt.Frame implements java.awt.event.ActionListener, java.awt.event.WindowListener {
	private java.awt.Button ivjCloseButton = null;
	private java.awt.TextArea ivjStackTextArea = null;

/**
 * Constructor
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public TraceFrame() {
	super();
	initialize();
}

/**
 * TraceFrame constructor comment.
 * @param title java.lang.String
 */
public TraceFrame(String title) {
	super(title);
}
/**
 * Method to handle events for the ActionListener interface.
 * @param e java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void actionPerformed(java.awt.event.ActionEvent e) {
	// user code begin {1}
	// user code end
	if ((e.getSource() == getCloseButton()) ) {
		conn1(e);
	}
	// user code begin {2}
	// user code end
}
/**
 * conn0:  (TraceFrame.window.windowClosing(java.awt.event.WindowEvent) --> TraceFrame.dispose())
 * @param arg1 java.awt.event.WindowEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void conn0(java.awt.event.WindowEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.dispose();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * conn1:  (CloseButton.action.actionPerformed(java.awt.event.ActionEvent) --> TraceFrame.dispose())
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void conn1(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.dispose();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * Return the CloseButton property value.
 * @return java.awt.Button
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private java.awt.Button getCloseButton() {
	if (ivjCloseButton == null) {
		try {
			ivjCloseButton = new java.awt.Button();
			ivjCloseButton.setName("CloseButton");
			ivjCloseButton.setLabel("Close");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	};
	return ivjCloseButton;
}

/**
 * Return the StackTextArea property value.
 * @return java.awt.TextArea
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private java.awt.TextArea getStackTextArea() {
	if (ivjStackTextArea == null) {
		try {
			ivjStackTextArea = new java.awt.TextArea();
			ivjStackTextArea.setName("StackTextArea");
			ivjStackTextArea.setRows(10);
			ivjStackTextArea.setColumns(60);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	};
	return ivjStackTextArea;
}

/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(Throwable exception) {

	/* Uncomment the following lines to print uncaught exceptions to stdout */
	// System.out.println("--------- UNCAUGHT EXCEPTION ---------");
	// exception.printStackTrace(System.out);
}
/**
 * Initializes connections
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() {
	// user code begin {1}
	// user code end
	this.addWindowListener(this);
	getCloseButton().addActionListener(this);
}

/**
 * Initialize class
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	// user code begin {1}
	// user code end
	java.awt.GridBagConstraints constraintsStackTextArea = new java.awt.GridBagConstraints();
	java.awt.GridBagConstraints constraintsCloseButton = new java.awt.GridBagConstraints();
	setName("TraceFrame");
	setName("TraceFrame");
	setLayout(new java.awt.GridBagLayout());
	setBackground(java.awt.SystemColor.control);
	setSize(403, 236);
	setTitle("Stack Trace");

	constraintsStackTextArea.gridx = 0; constraintsStackTextArea.gridy = 0;
	constraintsStackTextArea.gridwidth = 1; constraintsStackTextArea.gridheight = 1;
	constraintsStackTextArea.fill = java.awt.GridBagConstraints.BOTH;
	constraintsStackTextArea.anchor = java.awt.GridBagConstraints.CENTER;
	constraintsStackTextArea.weightx = 1.0;
	constraintsStackTextArea.weighty = 1.0;
	constraintsStackTextArea.insets = new java.awt.Insets(8, 8, 8, 8);
	((java.awt.GridBagLayout) this.getLayout()).setConstraints(getStackTextArea(), constraintsStackTextArea);
	this.add(getStackTextArea());

	constraintsCloseButton.gridx = 0; constraintsCloseButton.gridy = 1;
	constraintsCloseButton.gridwidth = 1; constraintsCloseButton.gridheight = 1;
	constraintsCloseButton.anchor = java.awt.GridBagConstraints.EAST;
	constraintsCloseButton.weightx = 0.0;
	constraintsCloseButton.weighty = 0.0;
	constraintsCloseButton.insets = new java.awt.Insets(0, 8, 8, 8);
	((java.awt.GridBagLayout) this.getLayout()).setConstraints(getCloseButton(), constraintsCloseButton);
	this.add(getCloseButton());
	initConnections();
	// user code begin {2}
	// user code end
}

/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		TraceFrame aTraceFrame = new TraceFrame();
		try {
			Class aCloserClass = Class.forName("uvm.abt.edit.WindowCloser");
			Class parmTypes[] = { java.awt.Window.class };
			Object parms[] = { aTraceFrame };
			java.lang.reflect.Constructor aCtor = aCloserClass.getConstructor(parmTypes);
			aCtor.newInstance(parms);
		} catch (java.lang.Throwable exc) {};
		aTraceFrame.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main() of java.awt.Frame");
	}
}
/**
 * This method was created by a SmartGuide.
 * @param t java.lang.Throwable
 */
public void showTrace ( Throwable t) {
	StringWriter stringWriter= new StringWriter();
	PrintWriter writer= new PrintWriter(stringWriter);
	t.printStackTrace(writer);
	StringBuffer buffer= stringWriter.getBuffer();
	getStackTextArea().setText(buffer.toString());
	return;
}
/**
 * Method to handle events for the WindowListener interface.
 * @param e java.awt.event.WindowEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void windowActivated(java.awt.event.WindowEvent e) {
	// user code begin {1}
	// user code end
	// user code begin {2}
	// user code end
}
/**
 * Method to handle events for the WindowListener interface.
 * @param e java.awt.event.WindowEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void windowClosed(java.awt.event.WindowEvent e) {
	// user code begin {1}
	// user code end
	// user code begin {2}
	// user code end
}
/**
 * Method to handle events for the WindowListener interface.
 * @param e java.awt.event.WindowEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void windowClosing(java.awt.event.WindowEvent e) {
	// user code begin {1}
	// user code end
	if ((e.getSource() == this) ) {
		conn0(e);
	}
	// user code begin {2}
	// user code end
}
/**
 * Method to handle events for the WindowListener interface.
 * @param e java.awt.event.WindowEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void windowDeactivated(java.awt.event.WindowEvent e) {
	// user code begin {1}
	// user code end
	// user code begin {2}
	// user code end
}
/**
 * Method to handle events for the WindowListener interface.
 * @param e java.awt.event.WindowEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void windowDeiconified(java.awt.event.WindowEvent e) {
	// user code begin {1}
	// user code end
	// user code begin {2}
	// user code end
}
/**
 * Method to handle events for the WindowListener interface.
 * @param e java.awt.event.WindowEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void windowIconified(java.awt.event.WindowEvent e) {
	// user code begin {1}
	// user code end
	// user code begin {2}
	// user code end
}
/**
 * Method to handle events for the WindowListener interface.
 * @param e java.awt.event.WindowEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public void windowOpened(java.awt.event.WindowEvent e) {
	// user code begin {1}
	// user code end
	// user code begin {2}
	// user code end
}
}