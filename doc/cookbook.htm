<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="GENERATOR" CONTENT="Mozilla/4.04 [en] (Win95; I) [Netscape]">
   <TITLE>JUnit Cookbook</TITLE>
</HEAD>
<BODY>

<H1>
JUnit Cookbook</H1>
Here is a short cookbook showing you the steps you can follow in writing
and organizing your own tests using JUnit.
<H2>
Simple Test Case</H2>
How do you write testing code?

<P>The simplest way is as an expression in a debugger. You can change debug
expressions without recompiling, and you can wait to decide what to write
until you have seen the running objects. You can also write test expressions
as statements which print to the standard output stream. Both styles of
tests are limited because they require human judgement to analyze their
results. Also, they don't compose nicely- you can only execute one debug
expression at a time and a program with too many print statements causes
the dreaded "Scroll Blindness".

<P>JUnit tests do not require human judgement to interpret, and it is easy
to run many of them at the same time. When you need to test something,
here is what you do:
<OL>
<LI>
Create an instance of <A HREF="../javadoc/test.framework.TestCase.html">TestCase</A>:</LI>

<LI>
Override the method "<A HREF="../javadoc/test.framework.TestCase.html#runTest()">runTest</A>()"</LI>

<LI>
When you want to check a value, call "<A HREF="../javadoc/test.framework.TestCase.html#assert(boolean)">assert</A>()"
and pass a boolean that is true if the test succeeds</LI>
</OL>
For example, to test that the sum of two Moneys with the same currency
contains a value which is the sum of the values of the two Moneys, write:
<PRE><TT><FONT FACE="Courier"><FONT SIZE=-2>public void testSimpleAdd() {
</FONT></FONT>&nbsp;&nbsp;&nbsp; Money m12CHF= new Money(12, "CHF");&nbsp;
&nbsp;&nbsp;&nbsp; Money m14CHF= new Money(14, "CHF");&nbsp;
&nbsp;&nbsp;&nbsp; Money expected= new Money(26, "CHF");&nbsp;
&nbsp;&nbsp;&nbsp; Money result= m12CHF.add(m14CHF);&nbsp;
&nbsp;&nbsp;&nbsp; assert(expected.equals(result));
}</TT></PRE>
If you want to write a test similar to one you have already written, write
a Fixture instead. When you want to run more than one test, create a Suite.
<H2>
Fixture</H2>
What if you have two or more tests that operate on the same or similar
sets of objects?

<P>Tests need to run against the background of a known set of objects.
This set of objects is called a test fixture. When you are writing tests
you will often find that you spend more time writing the code to set up
the fixture than you do in actually testing values.

<P>To some extent, you can make writing the fixture code easier by paying
careful attention to the constructors you write. However, a much bigger
savings comes from sharing fixture code. Often, you will be able to use
the same fixture for several different tests. Each case will send slightly
different messages or parameters to the fixture and will check for different
results.

<P>When you have a common fixture, here is what you do:
<OL>
<LI>
Create a subclass of <A HREF="../javadoc/test.framework.TestCase.html">TestCase</A></LI>

<LI>
Add an instance variable for each part of the fixture</LI>

<LI>
Override "<A HREF="../javadoc/test.framework.TestCase.html#setUp()">setUp</A>()"
to initialize the variables</LI>

<LI>
Override "<A HREF="../javadoc/test.framework.TestCase.html#tearDown()">tearDown</A>()"
to release any permanent resources you allocated in setUp</LI>
</OL>
For example, to write several test cases that want to work with different
combinations of 12 Swiss Francs, 14 Swiss Francs, and 28 US Dollars, first
create a fixture:
<PRE><TT>public class MoneyTest extends TestCase {&nbsp;
&nbsp;&nbsp;&nbsp; private Money f12CHF;&nbsp;
&nbsp;&nbsp;&nbsp; private Money f14CHF;&nbsp;
&nbsp;&nbsp;&nbsp; private Money f28USD;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; protected void setUp() {&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; f12CHF= new Money(12, "CHF");&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; f14CHF= new Money(14, "CHF");&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; f28USD= new Money(28, "USD");&nbsp;
&nbsp;&nbsp;&nbsp; }
}</TT></PRE>
Once you have the Fixture in place, you can write as many Test Cases as
you'd like.
<H2>
Test Case</H2>
How do you write and invoke an individual test case when you have a Fixture?

<P>Writing a test case without a fixture is simple- override <I><TT><FONT FACE="Courier">runTest()</FONT></TT></I>
in an anonymous subclass of TestCase. You write test cases for a Fixture
the same way, by making a subclass of TestCase for your set up code and
then making anonymous subclasses for the individual test cases. However,
after a few such tests you would notice that a large percentage of your
lines of code are sacrificed to syntax.

<P>JUnit provides a more concise way to write a test against a Fixture.
Here is what you do:
<OL>
<LI>
Write the test case method in the fixture class. Be sure to make it public,
or it can't be invoked through reflection.</LI>

<LI>
Create an instance of the TestCase class and pass the name of the test
case method to the constructor.</LI>
</OL>
For example, to test the addition of a Money and a MoneyBag, write:
<PRE><TT>public void testMoneyMoneyBag() {&nbsp;
&nbsp;&nbsp;&nbsp; // [12 CHF] + [14 CHF] + [28 USD] == {[26 CHF][28 USD]}&nbsp;
&nbsp;&nbsp;&nbsp; Money bag[]= { f26CHF, f28USD };&nbsp;
&nbsp;&nbsp;&nbsp; MoneyBag expected= new MoneyBag(bag);&nbsp;
&nbsp;&nbsp;&nbsp; assertEquals(expected, f12CHF.add(f28USD.add(f14CHF)));
}</TT></PRE>
Create an instance of of MoneyTest that will run this test case like this:
<PRE><TT>new MoneyTest("testMoneyMoneyBag")</TT></PRE>
When the test is run, the name of the test is used to look up the method
to run.

<P>Once you have several tests, organize them into a Suite.
<H2>
Suite</H2>
How do you run several tests at once?

<P>As soon as you have two tests, you'll want to run them together. You
could run the tests one at a time yourself, but you would quickly grow
tired of that. Instead, JUnit provides an object, <A HREF="../javadoc/test.framework.TestSuite.html">TestSuite</A>
which runs any number of TestCases together.

<P>For example, to run a single test case, you execute:
<PRE><TT>TestResult result= (new MoneyTest("testMoneyMoneyBag")).run();</TT></PRE>
To create a suite of two test cases and run them together, execute:
<PRE><TT>TestSuite suite= new TestSuite();
suite.addTest(new MoneyTest("testMoneyEquals"));
suite.addTest(new MoneyTest("testSimpleAdd"));
TestResult result= suite.run();</TT></PRE>
TestSuites don't only have to contain TestCases. They contain any object
that implements the <A HREF="../javadoc/test.framework.Test.html">Test</A>
interface. For example, you can create a TestSuite in your code and I can
create one in mine, and we can run them together by creating a TestSuite
that contains both:
<PRE><TT><FONT FACE="Courier">TestSuite suite= new TestSuite();
</FONT></TT>suite.addTest(Kent.suite());
suite.addTest(Erich.suite());
TestResult result= suite.run();</PRE>

<H2>
TestRunner</H2>
How do you run your tests and collect their results?

<P>Once you have a test suite, you'll want to run it. JUnit provides tools
to define the suite to be run and to display its results. You make your
suite accessible to a TestRunner tool with a static method <I>suite</I>
that returns a test suite.
<BR>For example, to make a MoneyTest suite available to a TestRunner, add
the following code to MoneyTest:
<PRE><TT>public static Test suite() {&nbsp;
&nbsp;&nbsp;&nbsp; TestSuite suite= new TestSuite();&nbsp;
&nbsp;&nbsp;&nbsp; suite.addTest(new MoneyTest("testMoneyEquals"));&nbsp;
&nbsp;&nbsp;&nbsp; suite.addTest(new MoneyTest("testSimpleAdd"));&nbsp;
&nbsp;&nbsp;&nbsp; return suite;
}</TT></PRE>
JUnit provides both a graphical and a textual version of a TestRunner tool.
Start it by typing <TT>java<I><FONT FACE="Courier"><FONT SIZE=-2> </FONT></FONT></I><A HREF="../javadoc/test.ui.TestRunner.html">test.ui.TestRunner</A></TT>.
The graphical user interface presents a window with:
<UL>
<LI>
a field to type in the name of a class with a suite method,</LI>

<LI>
a Run button to start the test,</LI>

<LI>
a progress indicator that turns from red to green in the case of a failed
test,</LI>

<LI>
a list of failed tests.</LI>
</UL>
In the case of an unsuccessful test JUnit reports the failed tests in a
list at the bottom. JUnit distinguishes between <I>failures</I> and <I>errors</I>.
A failure is anticipated and checked for with assertions. Errors are unanticipated
problems like an <I>ArrayIndexOutOfBoundsException</I>. The following figure
shows an example of a failed test.
<CENTER><IMG SRC="IMG00001.GIF" ></CENTER>


<P>To find out more about a failure or an error select it in the list and
press Show. This will show you a stack trace of the failure.
<CENTER><IMG SRC="IMG00002.GIF" ></CENTER>


<P>Note that you can leave the JUnit window up all the time. After every
compile, press Run and JUnit will load the latest versions of your test
classes.

<P>There is a batch interface to JUnit, also. To use it type<TT><I><FONT FACE="Courier New">
</FONT></I>java <A HREF="../javadoc/test.textui.TestRunner.html">test.textui.TestRunner</A></TT>
followed by the name of the class with a suite method at an operating system
prompt. The batch interface shows the result as text output. An alternative
way to invoke the batch interface is to define a main method in your TestCase
class.

<P>For example, to start the batch TestRunner for MoneyTest, write:
<PRE><TT>public static void main(String args[]) {&nbsp;
&nbsp;&nbsp;&nbsp; test.textui.TestRunner.run(suite());
}</TT></PRE>
With this definition of main you can run your tests by simply typing <TT>java
MoneyTest at an operating system prompt.</TT>

<P>For using either the graphical or the textual version make sure that
the test.jar file is on your CLASSPATH.
</BODY>
</HTML>
